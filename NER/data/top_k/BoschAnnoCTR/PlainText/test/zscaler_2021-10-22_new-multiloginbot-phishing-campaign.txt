New MultiloginBot Phishing Campaign
October 22, 2021
Multilogin is an application designed to make it easier to log into multiple accounts on a single website or platform simultaneously.
Recently, Zscaler ThreatLabz has come across a live phishing campaign that is targeting genuine Multilogin users by tricking the users into downloading a malicious installer.
The installer is hosted on newly registered websites "multilogin-uk[.]com" and "multilogin-us[.]com" (registered on September 2nd 2021) which are a lookalikes of the legitimate website "multilogin[.]com".
The threat actor has taken great care to match every detail, starting from website layout to the url pattern used for downloading the application, in order to impersonate as the legitimate website.
The malicious installer installs a stealer (named as multilogin), written in Dotnet, on the compromised machine.
This stealer gathers sensitive information from the victim's system and sends it to its telegrambot in a zip format.
This blog aims to describe the behavior of the installer and the main functionalities of the stealer.
**Attack Flow:**
The below snapshot shows the delivery mechanism and attack chain of the malware.
![](https://lh4.googleusercontent.com/fLnxyksrgrpVOSyjLTdBUeWAZBKXUrsB-k2RZ-qmiYggSCYZR26Drv36Bde8z11O5H5DLMy7kVivELL2lP8WzHI6qbBEKdjSpoykn1HT8loIMBLcRvbZ26FniFs_pcway8OvvfOX=s1600)
**Technical Analysis**
----------------------
As a first step, the threat actors have cloned the legitimate website, giving it a similar domain name, in order to trick the user into visiting the phishing website and downloading the malicious installer hosted on it.
The below snapshot shows the difference between the fake and legitimate sites.
![](https://lh6.googleusercontent.com/DzbMUI7rXxVM-zeXj7VO_lUuY7HMjdXJuwu7q9C0ACbMGy0JRx3-qrQ3s9nV9yBYQ38UAZNAiH1VKMtHqezOkdK5HfrbVwoIcvw6700-VUpZQYcsbPmQA-WqwoJ9HnaOEVufYsJb=s1600).
For the purposes of analysis, we will look at the Installer with MD5 hash: **9986d6836e6b4456fd38e7d5b036c727**, which is an Inno package unsigned binary.
The below snapshot shows the comparison between the installer downloaded from the fake site and the installer from the legitimate site.
**![](https://lh3.googleusercontent.com/lQPDXre7LAuQHSRaW_TN2me22FaDxhUQAbgOwbJTgcxpu-W4VBQGaRnTLTeiJzUy4TBF7YFaJ9G9L_0iytirWLBO6Yi19kO1ctALSd6PLNe7zAjkN2seoqoY2ODjZ11Cj4jNkuUf=s1600)**
Like the normal installer, the malicious installer creates a full environment, starting with registry changes, then creating required folders (explained later), for the effective execution of the malware.
In order to achieve persistence on the compromised machine, the malicious installer creates a shortcut file in the ***All Users startup folder*** as can be seen in the below snapshot.
**![](https://lh6.googleusercontent.com/PfF2UBuTpZBPh3pr8bf6Il0I_Qs8rbXmKNVfFO3xjMBwkuJTPyFlch2g2CeNfcc9x41Za5Lt7GlOmVwoih9eaBKyzO74nCMhhplhbpojr-6Lq-R2XpvEcwDBr1bqPv4Lx9s_SXSt=s1600)**
It is to be noted that the installer drops the malware at the user’s selected installation path at the time of installing the application.
**Required folders:** The installer creates a folder named “**Item”** and the following sub-folders, which shall be checked and used by the malware later:
* **AutoFills**: Consists of text files containing browser’s autofill information.
* **Cookies:** Consists of text files containing browser’s cookies information.
* **IP:** Consists of a text file containing IP address information.
* **Passwords:** Consists of text files containing user's login information.
After successful installation, the final GUI (Graphical User Interface) comes up with an enabled check box to launch the application named as multilogin (hereinafter referred to as malware).
After clicking the “**Finish**” button, the malware comes into play.
Now, let's get into the code to understand the functionality of the malware.
### **Information Gathering**
Before starting stealing activities, the malware checks the required folders in the system and then executes its functions to collect information from the compromised machine, explained below:
***1.IP Address Information:***
Firstly, the malware collects the IP address by making a web request to “*checkip.dyndns.org*”and stores the collected information at “**<Installation\_Path>\Item\IPAddress\IPAddress.txt****”,** in the format **<IP\_Address>:<Country\_Name>,** asexplainedin the below snippet**.**
*![](https://lh4.googleusercontent.com/y8g08aNun4SF_UH0qsNs_CDSvbY6xLRa_johSR55prh9ocmfkHWts-X9xNBeciDrtn_5zJbwuoA4W1BIdLDMrfc2x46WWQ2u2z2QB2OHN4eatR7OKz7c4dq4pAt3ULgb6M5aKQCA=s1600)*
It is to be noted that the above code also acts as a checkpoint for an internet connection--that is, if the malware doesn’t get a response, then the malware crashes.
***2.User’s Login data:***
The steps to gather the login data of the user are as follows:
* Creates a copy of existing login data file to the destination file that is named as ‘C:\LoginData0’ in this case.
The below snippet shows the detailed steps.
![](https://lh3.googleusercontent.com/to9alh9o7RS-0c__uBFMxTghNylxqEo-NnaPzhUk9I_TchOIeyvaqNwba8umsAMqEMDNrBdwVKqJ0jtubnYrQQgg8BrJcWWSRt8IHJ_VZbIYYOa0Av82BIwHmBy0j7VL6UGKQ1TF=s1600)
* The below snippet shows how the SQL query is being executed against the newly created i.e **C:\LoginData0** file to carve out the login information.
And then the information is decrypted and stored in a new file placed at **<Installation\_Path>\Item\Password\<Browser\_name>Profile\_<Integer>\_PASSWORD.txt>**.
![](https://lh6.googleusercontent.com/7ElsOlBLy3w115-6Uego6qBP8G5n7Rs8wMXi7zW6AhRndFWfllcpETtwerJg6JT0qJX0YettqhTtEiv3tEJ2fPzwUyWBwRWA5cMg4HZzv3jd2cGDtKRM9XzVbVp6uPmrvr7klLDK=s1600)
* The login data contains passwords in an encrypted format, so the malware first gets the key, which shall be used further to decrypt the encrypted password.
The below snapshots explain the same.
![](https://lh6.googleusercontent.com/T2JYI-vhWxTKqegMtWZ9wGNZNc80MbiY02ctbacRFa3fWTAHRDVKs_wFxtCo98wjaFY7xJb68JyH3WYzbqz1b4gCAqrwFNJvNJ96P6hxcdDbQ_LFgu7uZsrQyafYzY7FsKbvVt0t=s1600)
![](https://lh4.googleusercontent.com/1oL8R97VBbJGfVaoOdOubdPrgbcgHSNvC7UHe2bSB1w8L9dyHVw0_VI_IpJiIxHH2wRy3O20x_j5bS4E7R53OCGFrKGIg_-j4FhndbCQOhudyuwXWoM8rvLKyjaenIFUqC46lHvZ=s1600)
* The next step is to get the encrypted data (password), which shall be passed to the next function named “Decrypt” explained in the next step.
![](https://lh4.googleusercontent.com/HA0-2u8Yl46z9PtGN6xNYRBSM_QwYhjO_IKI5kGoAo3-IWVJ3FDGBGLYV_Vy8z-dpmAWM_Ituy6SVLB739xEspY13BNlwDozXW00xHx-YPH75ILXs2RIFWYVCHgxwnwh3Ok2Ogho=s1600)
* After getting the key and the encrypted data, the malware will decrypt them by using the below code.
![](https://lh6.googleusercontent.com/TDxznZIcDUY0HlI0j3-R45XYX_geueEhl9_zoJyTKoOSPoxhFmtLlCYYQFE15OuJVxLU7b98LeUuLZfcwXtvRroQrUlQHlKDlHs1dhLEEr-N41DnNf5n0jFC8PA3pIULCLi00yGs=s1600)
* The below snippet shows the format in which malware will store the user login data information.
*![](https://lh6.googleusercontent.com/uM_lfRbMzDTQy9kYTiK8Hq3_jP3Z1OWDf-RvTMuxyJzjJSOJ3nsaPkTwe93ICYlZ9QIf9lfRZpcMlUnJ5G6_M-pzXqPNJQ_0p38I1_Gq5bvRuVBKSe5POIoKTr-Ayq9cck8Ou_OH=s1600)*
***3.Autofill and Cookies:***
The malware uses a similar mechanism to the one explained above to collect autofill and cookies information and stores the respective data in a file placed at **<Installation\_Path>\Item\Autofill\<Browser\_name>Profile\_<Integer>\_AUTOFILL.txt>** and **<Installation\_Path>\Item\cookies\<Browser\_name>Profile\_<Integer>\_cookies.txt>,** respectively.
The below table depicts the targeted file and the sql queries used to extract the information.
| **Type** | **Targeted file** | **Newly Created file Path** | **Sql Query** | **Decryption of bytes?** |
| Autofills | Webdata | C:\Webdata0 | **Select name, value FROM autofills** | False |
| Cookies | cookies | C:\cookies0 | **SELECT host\_key, is\_httponly, path, is\_secure, expires\_utc, name, encrypted\_value, creation\_utc FROM cookies order by host\_key,creation\_utc desc** | True |
The below snippet shows the format in which malware will store the related information.
*![](https://lh4.googleusercontent.com/1x_j6SPpeiuPb1ineNsblR8P7sdCfPdgm-nMkVJT9t4sbipNSgQZPEl1K0h0gd3-LVWc0_ZiUooZQtjZ9deYoZGU18MfH3Gv2gVqArCaFUB486Kj8vf2BURYU41Gpu5uaeKW_ODW=s1600)*
**Note:-** *Similar code and logic is there for stealing information from other browsers (except Firefox).
The below snapshot shows the list of browsers targeted by the malware author.*
***![](https://lh3.googleusercontent.com/1S4fk0nTR5PHieVqK2Lrj1MDvPMLhAID2bl8GM96ds3qatkgG_8B9qcx2Wu-KTgg4PPVXWM_-tdCYZKXcznmECpHnKfT_bAtqe1c_rIvIgwQKDkNCvFGADD247RN8CG1INshrK7L=s1600)***
***<Browser>*Service** = Responsible for checking the targeted file location and then writing of the decrypted data.
***<Browser>*Decryptor**= Responsible for decryption of the encrypted data
In the case of Firefox, the malware targets *cookies.sqlite, signons.sqlite* and *logins.json* files to carve out the sensitive information and stores the data in **<Installation\_Path>\Item\cookies\FFProfile\_Cookies.txt** and **<Installation\_Path>\Item\Password\FFProfile\_PASSWORD\_.txt** respectively.
It is to be noted that for decryption of encrypted data, the malware uses **PK11SDR\_Decrypt**” API of ***nss3.dll***.
### **Zip file creation code**
After stealing all the data from different browsers, the malware then creates a zip file which shall be sent to the command and control (C2) server.
The below code explains the same.
**![](https://lh5.googleusercontent.com/VFS-qAl7kzuprGY41lmbERO5E7IHjgnltt4MGE-VNNBHxtu0YTnUe0d5b1AA6DtXuyWvxFNGImMxorudbiUP2d4GWQhKDtMPpJHehhxYwH1A0I6aNMr96FKIGXzz0QOomoJjc32g=s1600)**
![](https://lh6.googleusercontent.com/EOZzWTKaieOmjMZ6PfMFIYqPrgfZgbrq958vOnZmAqzDLxt09YpnZpKjfaKT1gUcWzzOYscl0pobHYNFvQm7VX5HtyU_IbE_8XZG9DfurB6Y-CnG6YwDY8gCvGNqgZ2lM_5wwnXA=s1600)
### **Telegram Bot**
After zip creation, in order to transfer the zip file, the malware initiates C2 communication to its Telegram bot, using a hard-coded token.
The snippets of the code are shown below.
* Setting up of required protocols + Reading of zip file + Sending data (labeled 1)
* Full telegram bot url (labeled 2)
![](https://lh5.googleusercontent.com/Je-OeDF2BzSnCdzIqwG9Ozu7FMjs4D3GTtMpQQi2Vgp_DhRLniFMOCDHRyjpUK4whqwx_Y_zyzr4B5a9gGW9wNdcJgigfautrUCeR0pRh-JX6ZiuRIff4AkSKNfLY2l_3r02cD-f=s1600)
### **Post-Stealing Activities**
After successfully performing the stealing activities, in order to leave no trace, the malware displays a pop-up with a false message to update the application and asks the user for confirmation to proceed ahead.
Once the user responds, then the malware opens a legitimate link in the foreground and deletes the created zip file in the background, irrespective of the option chosen by the user.
It means that even if the user selects  “No,” the code will execute in the same pattern.
### **How to Defend Against This Attack**
Zscaler's multilayered cloud security platform detects these indicators at various levels: [Win32.Backdoor.MultiloginBot](https://threatlibrary.zscaler.com/threats/95294a02-669e-4115-b49f-9e9bc6cd16e3).
The Zscaler sandbox coverage is below:
###
![](https://lh5.googleusercontent.com/p7wrm3MQ2c_MmuJ3pQzwLBHB1NmHiJtkNfDHaSVY9bEIzDadw_rZxE-pAFgBGEZ0NpFjcNQqPXd1bKv_X2SjOyb-GrTI1fPsDHWdgdbDLpIjlCUhow8urf6WcxnJAftbUNv4GnjN=s1600)
### **MITRE Att&ck Table**
| T1584 | Compromise Infrastructure |
| T1547 | Boot or Autostart Execution |
| T1555 | Credentials from Password Stores |
| T1567 | Exfiltration over Web Services |
| T1059 | Command and Scripting Interpreter |
| T1005 | Data from Local System |
| T1114 | Email Collection |
| T1560 | Archive Collected Data |
| T1606 | Forge Web Credentials |
### **IOCS**
Below are information on IOCs, including MD5 hashes and URLs, that should be blocked.
**MD5s**
9986d6836e6b4456fd38e7d5b036c727
f991573756dbc778b52b84212c7a36c5
**Phishing domains:**
multilogin-uk[.]com
multilogin-us[.]com